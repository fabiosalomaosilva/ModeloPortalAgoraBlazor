@inject ClienteState ClienteState
@inject IJSRuntime JsRuntime

@if (ClienteState.Cliente.ContasBancarias.Count > 0)
{
    <div class="grid grid-cols-1 overflow-x-auto bg-white shadow-md rounded">
        <table class="w-full">
            <thead>
            <tr class="bg-secondary text-gray-50 uppercase text-sm">
                <th class="py-3 px-6 text-left text-sm">Tipo</th>
                <th class="py-3 px-6 text-left text-sm">Banco</th>
                <th class="py-3 px-6 text-left text-sm">Agência</th>
                <th class="py-3 px-6 text-left text-sm">Conta</th>
                <th class="py-3 px-6 text-right text-sm">Excluir</th>
            </tr>
            </thead>
            <tbody class="text-gray-600 text-sm font-light">
            @foreach (var conta in ClienteState.Cliente.ContasBancarias)
            {
                <tr
                    key={index}
                    class="border-b border-gray-200 hover:bg-gray-100 whitespace-nowrap">
                    <td class="py-4 px-6 text-left font-normal whitespace-nowrap">
                        @conta.Tipo
                    </td>
                    <td class="py-4 px-6 text-left font-normal whitespace-nowrap">
                        @conta.Banco
                    </td>
                    <td class="py-4 px-6 text-left font-normal whitespace-nowrap">
                        @conta.Agencia
                    </td>
                    <td class="py-4 px-6 text-left font-normal whitespace-nowrap">
                        @conta.Conta-@conta.Digito
                    </td>
                    <td class="py-4 px-6 text-right whitespace-nowrap">
                        <button
                            @onclick="(() => Excluir(conta.Id))"
                            type="button"
                            class="p-1 rounded-full w-7 h-7 font-bold text-gray-600 bg-gray-200 hover:bg-gray-300 -pl-[3px] solid">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                strokeWidth={1.5}
                                stroke="currentColor"
                                class="w-5 h-4">
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"/>
                            </svg>
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="bg-yellow-100 rounded-lg py-5 px-6 mb-4 text-base text-yellow-700" role="alert">
        <h4 class="text-2xl font-medium leading-tight mb-2">Não há contas cadastradas!</h4>
        <hr class="border-yellow-600 opacity-30">
        <p class="mt-4 mb-0">
            Para continuar o cadastro, por favor inserir uma conta bancária.
        </p>
    </div>
}

@code {

    string idd = "3132";
    async void Excluir(string id)
    {
        var alert = new AlertModal(JsRuntime);
        var response  = await alert.ShowConfirmAsync("Excluir a conta", "Deseja excluir a conta bancária?", AlertIcon.Warning);
        if (!response) return;
        var item = ClienteState.Cliente.ContasBancarias.FirstOrDefault(p => p.Id == id);
        if (item == null) return;
        ClienteState.Cliente.ContasBancarias.Remove(item);
        await alert.ShowAlertAsync("Sucesso", "Conta bancária excluída!", AlertIcon.Success);
        StateHasChanged();
    }
}